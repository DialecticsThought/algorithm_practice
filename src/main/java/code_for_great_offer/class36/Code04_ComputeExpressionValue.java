package code_for_great_offer.class36;

// 来自美团
// () 分值为2
// (()) 分值为3
// ((())) 分值为4
// 也就是说，每包裹一层，分数就是里面的分值+1
// ()() 分值为2 * 2
// (())() 分值为3 * 2
// 也就是说，每连接一段，分数就是各部分相乘，以下是一个结合起来的例子
// (()())()(()) -> (2 * 2 + 1) * 2 * 3 -> 30
// 给定一个括号字符串str，已知str一定是正确的括号结合，不会有违规嵌套
// 返回分数
public class Code04_ComputeExpressionValue {

	public static int sores(String s) {
		return compute(s.toCharArray(), 0)[0];
	}
	/*
	*TODO
	* 从s[i]开始往下看  遇到 ')' 或者 终止位置  停！
	* 所遍历的这一段（从i位置开始到第一个')'或者 终止位置）的得分返回
	* 返回值：int[]  长度就是2
	* 0 ：分数是多少
	* 1 : 来到了什么位置停的！
	* */
	public static int[] compute(char[] s, int i) {
		/*
		*TODO
		* i位置 是 ')'
		* 返回1 和当前遍历到的位置
		* i位置 是 '('
		* 调用 f(当前遍历到的位置的下一个位置)
		* eg "()"
		* 直接f(0)
		* 遇到'(' 直接递归调用子函数f(1)
		* 不关心这个'('和谁匹配
		* 然后f(1) 遇到 ')' 向上返回1
		* f(0) 拿到了1后 手动+1 得到分数
		* 接下来f(0)会在 子函数返回的位置的下一个位置继续调用函数 f(2)
		* 因为没有2位置 所以 最终返回2
		*TODO
		* 也就是说  遇到 ')' 向上返回1 上一层的函数会加工答案
		*TODO ( ( ) ( ( ) ) ) ( )
		* 先调用f(0)
		* 1.f(0)遇到'(' 直接递归调用子函数f(1)
		* 2.f(1)遇到'(' 直接递归调用子函数f(2)
		* 3.f(2) 遇到 ')' 向上返回1这个值和2位置
		* 4.f(1) 拿到了1后 手动+1 得到分数2
		* 接下来f(1)会在 子函数返回的位置的下一个位置  继续调用函数 f(3) 此时f(1)结束了
		* 5.f(3)遇到'(' 直接递归调用子函数f(4)
		* 6.f(4)遇到'(' 直接递归调用子函数f(5)
		* 7.f(5) 遇到 ')' 向上返回1这个值和5位置
		* 8.f(4) 拿到了1后 手动+1 得到分数2
		* 接下来f(4)会在 子函数返回的位置的下一个位置  继续调用函数 f(6)
		* 9.f(6) 遇到 ')' 向f(3)返回2这个值和6位置 f(4)没了
		* 10.f(3) 拿到了f(6)的2后 手动+1 得到分数3
		* 接下来f(3)会在 结算 1和2位置的() 3 4 5 6位置的( ( ) ) 就是2*3=6 执行ans *= info[0] + 1;
		* 然后 子函数返回的位置的下一个位置   继续调用函数 f(7) 此时f(1)结束了
		* 11.f(7) 遇到 ')' 向f(0)返回1这个值和7位置
		* 12.f(0) 得到了f(7)的信息 就向上返回[6,7]
		* 13.f(0) 拿到了1后 手动+1 得到分数7
		* 接下来f(0)会在 子函数返回的位置的下一个位置继续调用函数 f(8)
		* 14.f(8)遇到'(' 直接递归调用子函数f(9)
		* 14.f(9) 遇到 ')' 向上返回1这个值和9位置
		* 15.f(8) 拿到了1后 手动+1=2 得到分数 7*2
		* 接下来f(0)会在 子函数返回的位置的下一个位置继续调用函数 f(10)
		* */
		if (s[i] == ')') {
			return new int[] { 1, i };
		}
		int ans = 1;
		while (i < s.length && s[i] == '(') {
			int[] info = compute(s, i + 1);
			ans *= info[0] + 1;
			i = info[1] + 1;
		}
		return new int[] { ans, i };
	}

	public static void main(String[] args) {
/*
		String str1 = "(()())()(())";
		System.out.println(sores(str1));

		// (()()) + (((()))) + ((())())
		// (()()) -> 2 * 2 + 1 -> 5
		// (((()))) -> 5
		// ((())()) -> ((2 + 1) * 2) + 1 -> 7
		// 所以下面的结果应该是175
		String str2 = "(()())(((())))((())())";
		System.out.println(sores(str2));

		// (()()()) + (()(()))
		// (()()()) -> 2 * 2 * 2 + 1 -> 9
		// (()(())) -> 2 * 3 + 1 -> 7
		// 所以下面的结果应该是63
		String str3 = "(()()())(()(()))";
		System.out.println(sores(str3));*/

		String str4 = "(()(()))()";
		System.out.println(sores(str4));
	}

}
