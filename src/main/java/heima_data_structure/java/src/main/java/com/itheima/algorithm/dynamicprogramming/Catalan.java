package heima_data_structure.java.src.main.java.com.itheima.algorithm.dynamicprogramming;

import java.util.Arrays;

/**
 * <pre>
 *   卡特兰数
 *   1.有1个节点： 1
 *     能组成二叉搜索树BST的个数 = 1  c(1) = 1
 *   2.有2个节点：1 2
 *     能组成二叉搜索树BST的个数 = 2  c(2) = 2
 *    2.1. 1作为根节点
 *     1
 *       ↘
 *         2
 *    2.2. 2作为根节点
 *          2
 *        ↙
 *      1
 *   3.有3个节点：1 2 3
 *     能组成二叉搜索树BST的个数 = 5  c(3) = 5
 *     3.1. 1作为根节点
 *      1                 1
 *        ↘                 ↘
 *          2                 3
 *             ↘            ↙
 *               3         2
 *     对于1作为根节点 其余的所有节点都在 1的右侧，  两个节点的排列 相当于 c(2) = 2
 *     3.2. 2作为根节点
 *          2
 *       ↙    ↘
 *      1      3
 *     对于2作为根节点 其余的节点在两侧  相当于 c(1) = 1
 *     3.3. 3作为根节点
 *             3          3
 *           ↙          ↙
 *         2          1
 *       ↙              ↘
 *     1                  2
 *     对于3作为根节点 其余的所有节点都在 3的左侧，  两个节点的排列 相当于 c(2) = 2
 *   4.有2个节点：1 2 3 4
 *     能组成二叉搜索树BST的个数 = 14    c(4) = 14
 *     4.1. 1作为根节点
 *      1                 1
 *        ↘                 ↘
 *          2                 2
 *             ↘                ↘
 *               4                3
 *             ↙                    ↘
 *          3                         4
 *
 *           1                  1
 *             ↘                  ↘
 *               4                  4
 *             ↙                  ↙
 *           2                  3
 *             ↘              ↙
 *               3          2
 *
 *        1
 *          ↘
 *            3
 *          ↙    ↘
 *        2        4
 *     对于1作为根节点 ，其余所有节点都 > 1 ,那么3个节点的排列组合 相当于 c(3) = 5
 *     4.2. 2作为根节点
 *          2                   2
 *       ↙     ↘             ↙     ↘
 *      1        4         1         3
 *             ↙                       ↘
 *           3                           4
 *     对于2作为根节点 ，其左侧节点一定是1，不会有变化
 *     其余所有节点都 > 2 ,那么2个节点的排列组合 相当于 c(2) = 2
 *     4.3. 3作为根节点
 *           3                    3
 *         ↙    ↘              ↙     ↘
 *       2        4          1        4
 *     ↙                       ↘
 *    1                           2
 *     对于3作为根节点 ，其右侧节点一定是4，不会有变化
 *     其余所有节点都 < 2 ,那么2个节点的排列组合 相当于 c(2) = 2
 *     4.4. 4作为根节点
 *               4                 4
 *             ↙                 ↙
 *          1                 1
 *             ↘                ↘
 *               3                2
 *             ↙                    ↘
 *          2                         3
 *
 *               4                   4
 *             ↙                   ↙
 *          3                    3
 *             ↘               ↙
 *               1           2
 *             ↙           ↙
 *          2             1
 *
 *                4
 *              ↙
 *            2
 *          ↙    ↘
 *        1        3
 *      对于4作为根节点 ，其余所有节点都 < 4 ,那么3个节点的排列组合 相当于 c(3) = 5
 * </pre>
 */
public class Catalan {
    public static void main(String[] args) {
        System.out.println(catalan(6));
    }

    static int catalan(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int j = 2; j < n + 1; j++) {
            for (int i = 0; i < j; i++) { // 第j个卡特兰数的拆分
//                System.out.printf("(%d,%d)\t", i, j - 1 - i);
                dp[j] += dp[i] * dp[j - 1 - i];
            }
//            System.out.println();
//            System.out.println(Arrays.toString(dp));
        }

        return dp[n];
    }
}
